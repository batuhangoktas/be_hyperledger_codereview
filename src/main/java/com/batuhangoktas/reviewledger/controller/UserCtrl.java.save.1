package com.batuhangoktas.reviewledger.controller;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.hyperledger.fabric.gateway.Contract;
import org.hyperledger.fabric.gateway.Gateway;
import org.hyperledger.fabric.gateway.Network;
import org.hyperledger.fabric.gateway.Wallet;
import org.hyperledger.fabric.gateway.Wallets;

@RestController
public class UserCtrl {

    @RequestMapping("/login")
    public String login(@RequestParam(name = "name") String name){
        return name;
    }

@RequestMapping("/GetReviewList")
    public String getreviewlist(@RequestParam(name = "keyId") String keyId){
        try (Gateway gateway = connect()) {

                        // get the network and contract
                        Network network = gateway.getNetwork("mychannel");
                        Contract contract = network.getContract("basic");

                        byte[] result;
			System.out.println("\n");
                        result = contract.evaluateTransaction("GetAllAssets",keyId);
                        System.out.println("GetReviewList: result: " + new String(result));
	                
                        return new String(result);
                }
                catch(Exception e){
                        System.err.println(e);
                        return "ERROR";
                }

    }

	@RequestMapping("/ReviewSubmit")
    	public String reviewSubmit(@RequestParam(name = "keyId") String keyId, @RequestParam(name = "userId") String userId){
        try (Gateway gateway = connect()) {

                        // get the network and contract
                        Network network = gateway.getNetwork("mychannel");
                        Contract contract = network.getContract("basic");

                        System.out.println("\n");
                        System.out.println("Submit Transaction: keyId");
                        contract.submitTransaction("ReviewSubmit", keyId, userId, "", "Desc");
                        return new String(keyId + ": Submit");
                }
                catch(Exception e){
                        System.err.println(e);
                        return "ERROR";
                }

    }

 @RequestMapping("/CreateAsset")
        public String createasset(@RequestParam(name = "keyId") String keyId, @RequestParam(name = "userId") String userId){
        try (Gateway gateway = connect()) {

                        // get the network and contract
                        Network network = gateway.getNetwork("mychannel");
                        Contract contract = network.getContract("basic");

                        System.out.println("\n");
                        System.out.println("Submit Transaction: " + keyId);
                        contract.submitTransaction("CreateAsset", keyId, userId, "", "Desc");
                        return new String(keyId + ": Submit");
                }
                catch(Exception e){
                        System.err.println(e);
                        return "ERROR";
                }

    }


    @RequestMapping("/test")
    public String test(){
    try (Gateway gateway = connect()) {

			// get the network and contract
			Network network = gateway.getNetwork("mychannel");
			Contract contract = network.getContract("basic");

			byte[] result;

//			System.out.println("Submit Transaction: InitLedger creates the initial set of assets on the ledger.");
//			contract.submitTransaction("InitLedger");

			System.out.println("\n");
			result = contract.evaluateTransaction("GetAllAssets");
			System.out.println("Evaluate Transaction: GetAllAssets, result: " + new String(result));

			System.out.println("\n");
//			System.out.println("Submit Transaction: CreateAsset asset13");
			//CreateAsset creates an asset with ID asset13, color yellow, owner Tom, size 5 and appraisedValue of 1300
//			contract.submitTransaction("CreateAsset", "asset13", "yellow", "5", "Tom", "1300");

//			System.out.println("\n");
//			System.out.println("Evaluate Transaction: ReadAsset asset13");
			// ReadAsset returns an asset with given assetID
//			result = contract.evaluateTransaction("ReadAsset", "asset13");
//			System.out.println("result: " + new String(result));

//			System.out.println("\n");
//			System.out.println("Evaluate Transaction: AssetExists asset1");
			// AssetExists returns "true" if an asset with given assetID exist
//			result = contract.evaluateTransaction("AssetExists", "asset1");
//			System.out.println("result: " + new String(result));

//			System.out.println("\n");
//			System.out.println("Submit Transaction: UpdateAsset asset1, new AppraisedValue : 350");
			// UpdateAsset updates an existing asset with new properties. Same args as CreateAsset
//			contract.submitTransaction("UpdateAsset", "asset1", "blue", "5", "Tomoko", "350");

//			System.out.println("\n");
//			System.out.println("Evaluate Transaction: ReadAsset asset1");
//			result = contract.evaluateTransaction("ReadAsset", "asset1");
//			System.out.println("result: " + new String(result));

//			try {
//				System.out.println("\n");
//				System.out.println("Submit Transaction: UpdateAsset asset70");
				//Non existing asset asset70 should throw Error
//				contract.submitTransaction("UpdateAsset", "asset70", "blue", "5", "Tomoko", "300");
//			} catch (Exception e) {
//				System.err.println("Expected an error on UpdateAsset of non-existing Asset: " + e);
//			}

//			System.out.println("\n");
//			System.out.println("Submit Transaction: TransferAsset asset1 from owner Tomoko > owner Tom");
			// TransferAsset transfers an asset with given ID to new owner Tom
//			contract.submitTransaction("TransferAsset", "asset1", "Tom");

			System.out.println("\n");
			System.out.println("Evaluate Transaction: ReadAsset asset1");
			result = contract.evaluateTransaction("ReadAsset", "asset1");
			System.out.println("result: " + new String(result));
			return new String(result);
		}
		catch(Exception e){
			System.err.println(e);
			return "ERROR";	
		}

    }

	public static Gateway connect() throws Exception{
		// Load a file system based wallet for managing identities.
		Path walletPath = Paths.get("wallet");
		Wallet wallet = Wallets.newFileSystemWallet(walletPath);
		// load a CCP
		Path networkConfigPath = Paths.get("..", "..", "test-network", "organizations", "peerOrganizations", "org1.example.com", "connection-org1.yaml");

		Gateway.Builder builder = Gateway.createBuilder();
		builder.identity(wallet, "appUser").networkConfig(networkConfigPath).discovery(true);
		return builder.connect();
	}
}
